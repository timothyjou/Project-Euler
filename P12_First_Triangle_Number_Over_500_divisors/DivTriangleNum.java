/**
 * Created by timothyjou on 16-02-25.
 */
import java.util.*;

// The sequence of triangle numbers is generated by adding the natural numbers. 
//So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:

// 1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...

// Let us list the factors of the first seven triangle numbers:

//  1: 1
//  3: 1,3
//  6: 1,2,3,6
// 10: 1,2,5,10
// 15: 1,3,5,15
// 21: 1,3,7,21
// 28: 1,2,4,7,14,28
// We can see that 28 is the first triangle number to have over five divisors.

// What is the value of the first triangle number to have over five hundred divisors?

public class DivTriangleNum {
//    Sieve Of Eratonetus to find the primes below the number for prime factorizaiton
    public static boolean isPrime(int input){
        List<Integer> listOfFactor = new ArrayList<Integer>();
        for(int i = 1; i < input+1; i++){
           if(input%i ==0){
               listOfFactor.add(i);
            }
        }
    return (listOfFactor.size()==2);
    }

    //Sieve oF Eros that allows user to input a nubmer n and outputs a list of prime under that number
    //it's muc hfaster than brute force
    public static List<Integer> sieveOfEros(int n){
        int[] a;
        a = new int[n-1];

        for(int i = 0; i< n-2; i++){
            a[i] = i+2;
        }

        int rootn = (int) Math.ceil(Math.sqrt(n));
        List<Integer> listOfrootnPrime = new LinkedList<Integer>();
        for(int i = 2; i<rootn +1; i++){
            if(isPrime(i)){
                listOfrootnPrime.add(i);
            }
        }

        for (Integer prime:listOfrootnPrime){
            for(int i = 0; i<a.length;i++){
                if (!(a[i]==prime)){
                    if(a[i]%prime == 0){
                        a[i] =0;
                    }
                }
            }}
        List<Integer> primesOfN = new LinkedList<Integer>();
        for(int i = 0; i<a.length; i++){
            if(!(a[i]==0)){
                primesOfN.add(a[i]);
            }
        }
//        if(isPrime(n)){
//            primesOfN.add(n);
//        }
        return primesOfN;
    }
//    The sequence of triangle numbers is generated by adding the natural numbers.
//    So the 7th triangle number would be 1 + 2 + 3 + 4 + 5 + 6 + 7 = 28. The first ten terms would be:
//
//            1, 3, 6, 10, 15, 21, 28, 36, 45, 55, ...
//
//    Let us list the factors of the first seven triangle numbers:
//            1: 1
//            3: 1,3
//            6: 1,2,3,6
//            10: 1,2,5,10
//            15: 1,3,5,15
//            21: 1,3,7,21
//            28: 1,2,4,7,14,28
//    We can see that 28 is the first triangle number to have over five divisors.
//
//    What is the value of the first triangle number to have over five hundred divisors?
    public static void main(String[] args){
        int n = 1;
        int answer = 0;
        while(n>0){
            //make nth triangle number
            int nthTri = n*(n+1)/2;
            List<Integer> primesUptoTri = sieveOfEros((int) Math.sqrt(nthTri) );
            List<Integer> primeFactors = new LinkedList<Integer>();
            int nthTri2 = nthTri;
            for (int i =0 ; i<primesUptoTri.size();i++ ){
                if(nthTri2 % primesUptoTri.get(i) == 0 ){
                    nthTri2/= primesUptoTri.get(i);
                    primeFactors.add(primesUptoTri.get(i));
                    i--;
                    if(nthTri2 ==1){
                        break;
                    }
                }
            }
            int factors = 1;
            for(int i =0; i<primesUptoTri.size();i++){
                factors *= (1 +Collections.frequency(primeFactors,primesUptoTri.get(i)));
            }
            if (factors > 500){
                answer = nthTri;
                break;
            }
            System.out.printf("I am at %d th Triangle number, and the number of facotrs is %d\n",n,factors );
            n++;
        }
        System.out.printf("The First Traingle Number that has over 500 divisors is %d\n", answer);
    }
}
